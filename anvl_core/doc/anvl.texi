\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename anvl.info
@settitle ANVΛ

@macro lee{DIR, PREFIX}
  @node \PREFIX\ Invokation
  @section Invokation
  @lowersections
    @include \DIR\/cli_param.texi
  @raisesections

  @node \PREFIX\ Environment variables
  @section Environment Variables
  @include \DIR\/os_env.texi

  @node \PREFIX\ All Configurable Values
  @section Index of All Configurable Values
  @lowersections
    @include \DIR\/value.texi
  @raisesections

  @node \PREFIX\ Project Configuration
  @section Project Configuration
  @lowersections
    @include \DIR\/value.proj.texi
  @raisesections

  @node \PREFIX\ API Reference
  @section API Reference
  @lowersections
    @include \DIR\/app.texi
  @raisesections
@end macro

@macro pconf
  Project configuration:
@end macro

@c %**end of header
@copying
A general-purpose parallel task execution tool.

Copyright @copyright{} 2024-2025

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
A copy of the license is included in the section entitled ``GNU
Free Documentation License''.

A copy of the license is also available from the Free Software
Foundation Web site at @url{https://www.gnu.org/licenses/fdl.html}.

@end quotation

@end copying

@titlepage
@title ANVΛ
@subtitle A general-purpose parallel task execution tool
@author  k32
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of the contents at the beginning.
@contents

@ifnottex
@node Top
@top ANVΛ

@insertcopying
@end ifnottex

@node Introduction
@chapter Introduction

ANVL a general-purpose task planning and execution tool,
that aims to be conceptually simple and flexible.

ANVL solves the problem of transitioning the system into a desired state step-by-step,
using parallelism when possible.
It's meant as an alternative to tools like @code{make} and @code{ansible},
but it takes a different approach focusing on @i{conditions} and @i{preconditions}, expressed in a simple DSL based on Erlang.

@node Concepts
@section Concepts

@subsection Conditions and preconditions
The desired state of the system is expressed as a @i{condition}:
a function that checks if the system is already in the correct state,
and running arbitrary code to transfer into it there otherwise:

@example erlang
@verbatim
-memo.
file_exists(Name) ->
  %% Check condition:
  filelib:is_file(Name) orelse
  begin
     %% If condition is not satisfied, execute the code:
     file:write_file(Name, <<>>)
  end.
@end verbatim
@end example

@subsection Plugins

@subsection Projects

@subsection ANVL versus tranditional build systems

A traditional build system is a program that automatically solves the following problems:

@itemize
@item Build targets that have not been built
@item Re-build targets that are out-of-date
@item Do not rebuild targets that are up to date
@item Build targets that depend on each other in sequence
@item Build independent targets in parallel
@end itemize

Typical build systems solve this problem using concepts of source, target and rule.
Source and target are (usually) file names, and rule is a subroutine that takes the source files and produces the target file(s).
Most build systems have a standard way of checking whether the target has to be rebuilt, based on comparison of file modification times or hashes.
Dependencies between the targets are encoded in the build recipe as a graph.
This way of doing things works very well as long as build system only works with files,
but falls short when it’s no longer the case.

ANVL's conditions, on the opposite, are not tied to the file system or anything concrete.

Additionally, traditional build systems usually mix several concepts together:

@itemize
@item Dependency resolution
@item Checking for updates
@item Resource management (-j flag)
@end itemize

In contrast, ANVL presents these as independent library primitives.

@lee{anvl_core,ANVL}

@include anvl_erlc/doc/chapter.texi
@include anvl_git/doc/chapter.texi
@include anvl_texinfo/doc/chapter.texi

@node Index
@unnumbered Index

@syncodeindex vr cp
@syncodeindex fn cp
@syncodeindex tp cp
@printindex cp

@bye
