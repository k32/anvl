\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename anvl.info
@settitle ANVΛ

@macro lee{DIR, PREFIX}
  @node \PREFIX\ Invokation
  @section Invokation
  @lowersections
    @include \DIR\/cli_param.texi
  @raisesections

  @node \PREFIX\ Environment variables
  @section Environment Variables
  @include \DIR\/os_env.texi

  @node \PREFIX\ All Configurable Values
  @section Index of All Configurable Values
  @lowersections
    @include \DIR\/value.texi
  @raisesections
@end macro

@macro pconf
  Project configuration:
@end macro

@c %**end of header
@copying
A general-purpose parallel task execution tool.

Copyright @copyright{} 2024-2025

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
A copy of the license is included in the section entitled ``GNU
Free Documentation License''.

A copy of the license is also available from the Free Software
Foundation Web site at @url{https://www.gnu.org/licenses/fdl.html}.

@end quotation

@end copying

@titlepage
@title ANVΛ
@subtitle A general-purpose parallel task execution tool
@author  k32
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of the contents at the beginning.
@contents

@ifnottex
@node Top
@top ANVΛ

@insertcopying
@end ifnottex

@node ANVL Common
@chapter Introduction

ANVL a general-purpose task planning and execution tool,
that aims to be conceptually simple and flexible.

ANVL solves the problem of transitioning the system into a desired state step-by-step,
using parallelism when possible.
It's meant as an alternative to tools like @code{make} and @code{ansible},
but it takes a different approach focusing on @i{conditions} and @i{preconditions}, expressed in a simple DSL based on Erlang.

@cindex Condition
The desired state of the system is expressed as a @i{condition}:
a function that checks if the system is already in the correct state,
and running arbitrary code to transfer into it there otherwise:

@example erlang
@verbatim
-memo.
file_exists(Name) ->
  %% Check condition:
  filelib:is_file(Name) orelse
  begin
     %% If condition is not satisfied, execute the code:
     file:write_file(Name, <<>>)
  end.
@end verbatim
@end example

@section API Reference
@xref{api/anvl/anvl_condition, Condition API},
@ref{api/anvl/anvl_hook, hooks},
@ref{api/anvl/anvl_plugin, plugins},
@ref{api/anvl/anvl_resource, resource management},
@ref{api/anvl/anvl_lib, utility functions}

@lee{anvl_plugin,ANVL}

@node ANVL erlc
@chapter Builtin Plugin anvl_erlc

@code{anvl_erlc} is a built-in plugin that compiles Erlang applications structured accorging to the
@url{https://www.erlang.org/doc/system/applications#directory-structure,OTP design principles}.
It allows ANVL to load other 3rd-party plugins.

@xref{api/anvl/anvl_erlc, API Reference}.

@lee{anvl_erlc,ANVL Erlc}

@node ANVL Plugin Locate
@chapter Builtin Plugin anvl_locate

@code{anvl_locate} is a built-in plugin that provides a generic discovery mechanism for resolving external dependencies.
This plugin doesn't do anything on its own,
but acts as a broker between dependency resolver plugins (such as @ref{ANVL Plugin Git})
and dependency consumers.

@xref{api/anvl/anvl_locate, API Reference}.

@node ANVL Plugin Git
@chapter Builtin Plugin anvl_git

@lee{anvl_git,ANVL Git}

@node ANVL Plugin TexInfo
@chapter Builtin Plugin anvl_texinfo

This builtin plugin contains routines for building documentation in GNU TexInfo format.

ANVL uses it to produce its own documentation,
as well as documentation for external plugins.

@xref{api/anvl/anvl_texinfo, API Reference}.

@lee{anvl_texinfo,ANVL TexInfo}

@node API Reference
@chapter API Reference
@include edoc/anvl.texi

@node Index
@unnumbered Index

@syncodeindex vr cp
@syncodeindex fn cp
@syncodeindex tp cp
@printindex cp

@bye
